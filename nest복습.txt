아키텍쳐.
"이런식으로 코드를 작성하니까 되게 효율적이더라" 에서 파생.
nest는 express를 사용한 훌륭한 아키텍쳐.

controller는 최전방에서 요청이 어디로 가야할 지를 함수로 라우팅해주는 역할.
오직 그역할만 함.
nestjs에서 정의하는 controller는 로직을 controller단위에서 정리를 해놓는걸 하지말라!!
로직은 서비스파일에다가 전부 정의!

도커:
특정 프로그램을 실행할 때 필요한 환경과 패키지들, 명령어들을 docker file 이라는 하나의 컨테이너로 묶어가지고 
그 어떤 환경에서도 도커가 설치되어 있으면 똑같은 조건속에서 해당 컨테이너를 실행할 수 있도록 해주는 기능.

여러개의 컨테이너를 관리하기 위해서 나온 제품이 kubernetes, docker compose, docker swarm
docker compose = 여러개의 컨테이너들을 한번에 묶어가지고 관리할 수 있게 해주는 기능.

모든 repository method는 전부 다 async(비동기)임!



---------------------------------------------------------3/4----------------------------------------------------------------------
<tag테이블>
ManyToMany(()=> postModel, (post)=> post.tags)
posts: PostModel[]


<post태이블>
ManyToMany(()=> TagModel, (tag) => tag.posts)
JoinTable()
tags: TagModel[]

<Relation Options>
- eager 옵션:   -> (기본값: false)      find() 실핼 할 때마다 항상 같이 가져올 relation으로 설정 할 지 말 지.
- cascade 옵션 -> (기본값: false)      저장할 때 relation이 걸린 property를 한번에 같이 저장 할지 말지. 
- nullable 옵션 -> (기본값: true)      해당 property가 null이 될 수 있는 지 없는 지.
- onDelete 옵션 -> (기본값: restrict) 관계가 삭제되었을 때 동작 옵션
				no action:  아무것도 안함
				casecade:   참조하는 Row도 같이 삭제
				set null:     참조하는 Row에서 참조 id를 null로 변경
				set default: 기본 세팅으로 설정(테이블의 기본 세팅)
				restrict:      참조하고 있는 Row 가 있는 경우 참조당하는 Row 삭제 불가

<FindManyOptions>
- select: {} 옵션       -> (기본값: all)  어떤 property를 선택할지, 만약에 select를 정의하지 않으면 모든 propery 다 가져옴.
- where: {} 옵션      -> (기본값: )   필터링할 조건을 입력. (where 옵션은 같은 객체 안에선 전부 & 조건으로 묶이게 됨.)
			       만약 OR 조건식으로 묶고 싶다면 where 옵션을 리스트로 제공.			
			        e.g. where: [ {id: 3}, {version: 1} ]
- relations: {} 옵션    -> relation 된 property를 가져오는 법.
- order: {} 옵션        -> property의 오름차 내림차 정의. (오름차: ASC, 내림차: DESC)
				e.g. order: {id: 'ASC'}
- skip: 옵션		   -> (기본값: 0) 처음 몇 개를 제외할지.
- take: 옵션		   -> (기본값: 0 = 테이블에 있는 전체 데이터 길이)  몇 개를 가져올 지.


<Where 쿼리에서 사용할 수 있는 유틸리티>
where: { id: Not(1) }                       id가 1이 아닌 경우 가져오기.
where: { id: LessThan(30) }               30보다 적은 id 가져오기.
where: { id: LessThanOrEqual(30) }     30보다 적거나 같은경우.
where: { id: MoreThan(30) }		30보다 큰 경우 가져오기.
where: { id: MoreThanOrEqual(30) }    30보다 크거나 같은경우 가져오기.
where: { id: Equal(30) } === where: { id: 30 }
where: { email: Like('%google%') }      앞 뒤로 따지지않고 'google' 이 들어간 경우 가져오기. (대소문자 구분함.)
where: { email: ILike('%google%') }     앞 뒤로 따지지않고 'google' 이 들어간 경우 가져오기. (대소문자 구분안함.)
where: { id: Between(10, 15) }		id가 10부터 15번 까지 가져오기.
where: { id: In( [ 1, 3, 5, 7, 99 ] ) }	id안에 1, 3, 5, b7, 99 들어간 경우 가져오기.
where: { id: IsNull() }			id가 null인 경우 가져오기


<흔히 사용되는 Repository method>
create()       모델에 해당되는 객체 생성 - 저장은 안함.
save()	         모델에 해당되는 객체 생성 및 저장.
preload()	 입력된 값을 기반으로 데이터를 불러오고 추가 입력된 값으로 데이터베이스에서 가져온 값들을 대체함.
		  저장하지는 않음.
increment()	  e.g. userRepository.increment( { id: 1 }, 'count', 2 )  -> id가 1인 property에 'count' property를 2만큼 증가.
decrement()   e.g. userRepository.increment( { id: 1 }, 'count', 1 )  -> id가 1인 property에 'count' property를 1만큼 감소.
count() 	  e.g. userRepository.count( { where: { email: ILike( '%0%' ) } } ) -> 0 이 들어간 email property 갯수 반환.
sum()
average()
min()
max()
findAndCount()



---------------------------------------------------------3/7----------------------------------------------------------------------
<Session 이란?>
유저의 정보를 데이터베이스에 저장하고 상태를 유지하는 도구.
- session은 특수한 ID 값으로 구성되어 있다.
- session은 서버에서 생성되며 클라이언트에서 쿠키를 통해 저장된다.
- 클라이언트에서 요청을 보낼 때, Session ID를 같이 보내면 현재 요청을 보내는 사용자가 누구인지 서버에서 알 수 있다.
  (요청마다 매번 아이디와 비밀번호를 물어볼 필요 없음)
- 서버에서 데이터가 저장되기 때문에 클라이언트에 사용자 정보가 노출될 위험이 없다.
- 데이터베이스에 Session을 저장해야 하기 때문에 Horizontal Scaling이 어렵다.

<JWT Token 이란?>
유저의 정보를 Base 64로 인코딩된 String 값에 저장하는 도구
- JWT Token은 Header, Payload, Signatrue로 구성되어있으며 Base64로 인코딩 되어있다.
- JWT Token은 서버에서 생성되며 클라이언트에 저장된다.
- 클라이언트에서 요청을 보낼 때, JWT Token ID를 같이 보내면 현재 요청을 보내는 사용자가 누구인지 서버에서 알 수 있다.
  (요청마다 매번 아이디와 비밀번호를 물어볼 필요 없음)
- JWT Token은 데이터베이스에 저장되지 않고, Signature 값을 이용해서 검증할 수 있다.
  그래서 검증할 때마다 데이터베이스를 매번 들여다볼 필요가 없다.
- 정보가 모두 토큰에 담겨있고 클라이언트에서 토큰을 저장하기 때문에 정보 유출의 위험이 있다.
- 데이터베이스가 필요없기 때문에 Horizontal Scaling이 쉽다.


---------------------------------------------------------3/11----------------------------------------------------------------------
<Refresh Token & Access Token>
- 두 토큰 모두 JWT 기반이다.

- Access Token은 API 요청을 할 때 검증용 토큰으로 사용된다. 즉, 인증이 필요한 API를 사용할 때는 꼭 Access Token을 Header에 넣어서 보내야한다.
  e.g. 유저 정보 수정, 회사 채용공고 지원 인원 확인 등.

- Refresh Token은 Access Token을 추가로 발급할 때 사용된다. Access Token을 새로고침(Refresh)하는 기능이 있기 때문에 Refresh Token 이라고 부른다.

- Access Token은 유효기간이 짧고 Refresh Token은 유효기간이 길다.

- 자주 노출되는 Access Token은 유효기간을 짧게해서 Token이 탈취돼도 해커가 오래 사용하지 못하도록 방지할 수 있다.

- 상대적으로 노출이 적은 Refresh Token의 경우 Access Token을 새로 발급받을때만 사용되기 때문에 탈취 가능성이 적다.


---------------------------------------------------------3/12----------------------------------------------------------------------
Pipes have two typicl use cases:
tranfromation; 변형	
validataion; 검증
-> 즉, 파이프는 파라미터를 변형해주고 검증까지 해주는 기능.

parameter는 무조건 string 으로 받을수 밖에 없음(url에서 추출해 오기 때문.)

좀 더 품질 좋은 소스코드를 작성하기위한 소프트웨어 개발 3대 원칙: KISS, YAGNI, DRY
KISS: Keep It Simple Stupid! - 간단하고 단순하게!
YAGNI: You Ain't Gonna Need It - 필요한 작업만!
DRY: Don't Repeat Yourself - 동일한 코드를 반복하지 마라!


---------------------------------------------------------3/12----------------------------------------------------------------------
<Postman 환경변수>
Initisl value = 팀 끼리 공유할 때 공유되는 값.
Current value = Initisl value 를 로컬에서만 override 할 수 있는 기능.

<TypeScript utility>
Pick, Omit, Partial -> Type을 반환 (extends 안됨)
PickType, OmitType, PartialType -> 값을 반환 (extends 가능)

<Exclude Anotation Options>
Request
frontend -> backend 데이터 전송 시에는,
plain object (JSON) -> class instance (dto) 로 변환됨.
Response
backend -> frontend 데이터 전송 시에는,
class instance (dto) -> plain object (JSON) 로 변환.
toClassOnly -> class instance 변환될때만(즉, 요청을 보낼때만 적용)
toPlainOnly -> plain object로 변환될때만(즉, 응답을 보낼때만 적용)
@Exclude() 애노태이션을 옵션없이 사용하면 toClassOnly, toPlainOnly 모두 적용됨.
request에서는 password를 제외시키지 말아야 하고 response에서만 제외시키고 싶음.

---------------------------------------------------------3/15----------------------------------------------------------------------
<Pagination>
- Pagination 이란 많은 데이터를 부분적으로 나눠서 불러오는 기술.

<Pagination 특징>
- 쿼리에 해당되는 모든 데이터를 한번에 다 불러오지 않고 부분적으로 쪼개서 불러옴. (e.g. 한번에 20개씩)
- 쿠팡같은 앱의 경우 수억개의 상품이 데이터베이스에 저장되어 있는데 사용자가 상품검색 화면을 들어갈때마다 모든 상품정보를 서버에서 클라이언트로 전송할 필요 없음.
- 현대 클라우드 시스템은 데이터 전송에 돈이 든다.
- 돈이 안들더라도 수억개의 데이터를 한번에 보내면 분명 메모리가 터질것이다.
- 메모리가 터지지 않더라도 데이터 전송에 상당히 오랜 시간이 걸릴 것이다.

<Page Based Pagination>
- 페이지 기준으로 데이터를 잘라서 요청하는 Pagination.
- 요청을 보낼때 원하는 데이터 갯수와 몇번째 페이지를 가져올지 명시.
- 페이지 숫자를 누르면 다음 페이지로 넘어가는 형태의 UI에서 많이 사용.
- Pagination 도중 데이터베이스에서 데이터가 추가되거나 삭제될경우 데이터가 누락되거나 중복될 수 있음.
- Pagination 알고리즘이 매우 간단함.

<Cursor Based Pagination>
- 가장 최근에 가져온 데이터를 기준으로 다음 데이터를 가져오는 Pagination.
- 요청을 보낼때 마지막 데이터의 기준값(ID등 Unique값)과 몇개의 데이터를 가져올지 명시.
- 스크롤 형태의 리스트에서 자주 사용(e.g. 앱의 ListView)
- 최근 데이터의 기준값을 기반으로 쿼리가 작성되기때문에 데이터가 누락되거나 중복될 확률이 적음.

